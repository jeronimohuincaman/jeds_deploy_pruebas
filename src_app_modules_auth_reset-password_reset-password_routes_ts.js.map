{"version":3,"file":"src_app_modules_auth_reset-password_reset-password_routes_ts.js","mappings":"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","sources":["./src/@fuse/validators/index.ts","./src/@fuse/validators/public-api.ts","./src/@fuse/validators/validators.ts","./src/app/modules/auth/reset-password/reset-password.component.ts","./src/app/modules/auth/reset-password/reset-password.component.html","./src/app/modules/auth/reset-password/reset-password.routes.ts"],"sourcesContent":["export * from '@fuse/validators/public-api';\n","export * from '@fuse/validators/validators';\n","import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';\n\nexport class FuseValidators\n{\n    /**\n     * Check for empty (optional fields) values\n     *\n     * @param value\n     */\n    static isEmptyInputValue(value: any): boolean\n    {\n        return value == null || value.length === 0;\n    }\n\n    /**\n     * Must match validator\n     *\n     * @param controlPath A dot-delimited string values that define the path to the control.\n     * @param matchingControlPath A dot-delimited string values that define the path to the matching control.\n     */\n    static mustMatch(controlPath: string, matchingControlPath: string): ValidatorFn\n    {\n        return (formGroup: AbstractControl): ValidationErrors | null =>\n        {\n            // Get the control and matching control\n            const control = formGroup.get(controlPath);\n            const matchingControl = formGroup.get(matchingControlPath);\n\n            // Return if control or matching control doesn't exist\n            if ( !control || !matchingControl )\n            {\n                return null;\n            }\n\n            // Delete the mustMatch error to reset the error on the matching control\n            if ( matchingControl.hasError('mustMatch') )\n            {\n                delete matchingControl.errors.mustMatch;\n                matchingControl.updateValueAndValidity();\n            }\n\n            // Don't validate empty values on the matching control\n            // Don't validate if values are matching\n            if ( this.isEmptyInputValue(matchingControl.value) || control.value === matchingControl.value )\n            {\n                return null;\n            }\n\n            // Prepare the validation errors\n            const errors = {mustMatch: true};\n\n            // Set the validation error on the matching control\n            matchingControl.setErrors(errors);\n\n            // Return the errors\n            return errors;\n        };\n    }\n}\n","import { NgIf } from '@angular/common';\nimport { Component, OnInit, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { FormsModule, NgForm, ReactiveFormsModule, UntypedFormBuilder, UntypedFormGroup, Validators } from '@angular/forms';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { RouterLink } from '@angular/router';\nimport { fuseAnimations } from '@fuse/animations';\nimport { FuseAlertComponent, FuseAlertType } from '@fuse/components/alert';\nimport { FuseValidators } from '@fuse/validators';\nimport { AuthService } from 'app/core/auth/auth.service';\nimport { finalize } from 'rxjs';\n\n@Component({\n    selector     : 'auth-reset-password',\n    templateUrl  : './reset-password.component.html',\n    encapsulation: ViewEncapsulation.None,\n    animations   : fuseAnimations,\n    standalone   : true,\n    imports      : [NgIf, FuseAlertComponent, FormsModule, ReactiveFormsModule, MatFormFieldModule, MatInputModule, MatButtonModule, MatIconModule, MatProgressSpinnerModule, RouterLink],\n})\nexport class AuthResetPasswordComponent implements OnInit\n{\n    @ViewChild('resetPasswordNgForm') resetPasswordNgForm: NgForm;\n\n    alert: { type: FuseAlertType; message: string } = {\n        type   : 'success',\n        message: '',\n    };\n    resetPasswordForm: UntypedFormGroup;\n    showAlert: boolean = false;\n\n    /**\n     * Constructor\n     */\n    constructor(\n        private _authService: AuthService,\n        private _formBuilder: UntypedFormBuilder,\n    )\n    {\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Lifecycle hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * On init\n     */\n    ngOnInit(): void\n    {\n        // Create the form\n        this.resetPasswordForm = this._formBuilder.group({\n                password       : ['', Validators.required],\n                passwordConfirm: ['', Validators.required],\n            },\n            {\n                validators: FuseValidators.mustMatch('password', 'passwordConfirm'),\n            },\n        );\n    }\n\n    // -----------------------------------------------------------------------------------------------------\n    // @ Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\n     * Reset password\n     */\n    resetPassword(): void\n    {\n        // Return if the form is invalid\n        if ( this.resetPasswordForm.invalid )\n        {\n            return;\n        }\n\n        // Disable the form\n        this.resetPasswordForm.disable();\n\n        // Hide the alert\n        this.showAlert = false;\n\n        // Send the request to the server\n        this._authService.resetPassword(this.resetPasswordForm.get('password').value)\n            .pipe(\n                finalize(() =>\n                {\n                    // Re-enable the form\n                    this.resetPasswordForm.enable();\n\n                    // Reset the form\n                    this.resetPasswordNgForm.resetForm();\n\n                    // Show the alert\n                    this.showAlert = true;\n                }),\n            )\n            .subscribe(\n                (response) =>\n                {\n                    // Set the alert\n                    this.alert = {\n                        type   : 'success',\n                        message: 'Your password has been reset.',\n                    };\n                },\n                (response) =>\n                {\n                    // Set the alert\n                    this.alert = {\n                        type   : 'error',\n                        message: 'Something went wrong, please try again.',\n                    };\n                },\n            );\n    }\n}\n","<div class=\"flex flex-col sm:flex-row items-center md:items-start sm:justify-center md:justify-start flex-auto min-w-0\">\n    <div class=\"md:flex md:items-center md:justify-end w-full sm:w-auto md:h-full md:w-1/2 py-8 px-4 sm:p-12 md:p-16 sm:rounded-2xl md:rounded-none sm:shadow md:shadow-none sm:bg-card\">\n        <div class=\"w-full max-w-80 sm:w-80 mx-auto sm:mx-0\">\n            <!-- Logo -->\n            <div class=\"w-12\">\n                <img src=\"assets/images/logo/logo.svg\">\n            </div>\n\n            <!-- Title -->\n            <div class=\"mt-8 text-4xl font-extrabold tracking-tight leading-tight\">Reset your password</div>\n            <div class=\"mt-0.5 font-medium\">Create a new password for your account</div>\n\n            <!-- Alert -->\n            <fuse-alert\n                class=\"mt-8\"\n                *ngIf=\"showAlert\"\n                [appearance]=\"'outline'\"\n                [showIcon]=\"false\"\n                [type]=\"alert.type\"\n                [@shake]=\"alert.type === 'error'\">\n                {{alert.message}}\n            </fuse-alert>\n\n            <!-- Reset password form -->\n            <form\n                class=\"mt-8\"\n                [formGroup]=\"resetPasswordForm\"\n                #resetPasswordNgForm=\"ngForm\">\n\n                <!-- Password field -->\n                <mat-form-field class=\"w-full\">\n                    <mat-label>Password</mat-label>\n                    <input\n                        id=\"password\"\n                        matInput\n                        type=\"password\"\n                        [formControlName]=\"'password'\"\n                        #passwordField>\n                    <button\n                        mat-icon-button\n                        type=\"button\"\n                        (click)=\"passwordField.type === 'password' ? passwordField.type = 'text' : passwordField.type = 'password'\"\n                        matSuffix>\n                        <mat-icon\n                            class=\"icon-size-5\"\n                            *ngIf=\"passwordField.type === 'password'\"\n                            [svgIcon]=\"'heroicons_solid:eye'\"></mat-icon>\n                        <mat-icon\n                            class=\"icon-size-5\"\n                            *ngIf=\"passwordField.type === 'text'\"\n                            [svgIcon]=\"'heroicons_solid:eye-slash'\"></mat-icon>\n                    </button>\n                    <mat-error>\n                        Password is required\n                    </mat-error>\n                </mat-form-field>\n\n                <!-- Password confirm field -->\n                <mat-form-field class=\"w-full\">\n                    <mat-label>Password (Confirm)</mat-label>\n                    <input\n                        id=\"password-confirm\"\n                        matInput\n                        type=\"password\"\n                        [formControlName]=\"'passwordConfirm'\"\n                        #passwordConfirmField>\n                    <button\n                        mat-icon-button\n                        type=\"button\"\n                        (click)=\"passwordConfirmField.type === 'password' ? passwordConfirmField.type = 'text' : passwordConfirmField.type = 'password'\"\n                        matSuffix>\n                        <mat-icon\n                            class=\"icon-size-5\"\n                            *ngIf=\"passwordConfirmField.type === 'password'\"\n                            [svgIcon]=\"'heroicons_solid:eye'\"></mat-icon>\n                        <mat-icon\n                            class=\"icon-size-5\"\n                            *ngIf=\"passwordConfirmField.type === 'text'\"\n                            [svgIcon]=\"'heroicons_solid:eye-slash'\"></mat-icon>\n                    </button>\n                    <mat-error *ngIf=\"resetPasswordForm.get('passwordConfirm').hasError('required')\">\n                        Password confirmation is required\n                    </mat-error>\n                    <mat-error *ngIf=\"resetPasswordForm.get('passwordConfirm').hasError('mustMatch')\">\n                        Passwords must match\n                    </mat-error>\n                </mat-form-field>\n\n                <!-- Submit button -->\n                <button\n                    class=\"fuse-mat-button-large w-full mt-3\"\n                    mat-flat-button\n                    [color]=\"'primary'\"\n                    [disabled]=\"resetPasswordForm.disabled\"\n                    (click)=\"resetPassword()\">\n                    <span *ngIf=\"!resetPasswordForm.disabled\">\n                        Reset your password\n                    </span>\n                    <mat-progress-spinner\n                        *ngIf=\"resetPasswordForm.disabled\"\n                        [diameter]=\"24\"\n                        [mode]=\"'indeterminate'\"></mat-progress-spinner>\n                </button>\n\n                <!-- Form footer -->\n                <div class=\"mt-8 text-md font-medium text-secondary\">\n                    <span>Return to</span>\n                    <a\n                        class=\"ml-1 text-primary-500 hover:underline\"\n                        [routerLink]=\"['/sign-in']\">sign in\n                    </a>\n                </div>\n\n            </form>\n        </div>\n    </div>\n    <div class=\"relative hidden md:flex flex-auto items-center justify-center w-1/2 h-full p-16 lg:px-28 overflow-hidden bg-gray-800 dark:border-l\">\n        <!-- Background - @formatter:off -->\n        <!-- Rings -->\n        <svg class=\"absolute inset-0 pointer-events-none\"\n             viewBox=\"0 0 960 540\" width=\"100%\" height=\"100%\" preserveAspectRatio=\"xMidYMax slice\" xmlns=\"http://www.w3.org/2000/svg\">\n            <g class=\"text-gray-700 opacity-25\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"100\">\n                <circle r=\"234\" cx=\"196\" cy=\"23\"></circle>\n                <circle r=\"234\" cx=\"790\" cy=\"491\"></circle>\n            </g>\n        </svg>\n        <!-- Dots -->\n        <svg class=\"absolute -top-16 -right-16 text-gray-700\"\n             viewBox=\"0 0 220 192\" width=\"220\" height=\"192\" fill=\"none\">\n            <defs>\n                <pattern id=\"837c3e70-6c3a-44e6-8854-cc48c737b659\" x=\"0\" y=\"0\" width=\"20\" height=\"20\" patternUnits=\"userSpaceOnUse\">\n                    <rect x=\"0\" y=\"0\" width=\"4\" height=\"4\" fill=\"currentColor\"></rect>\n                </pattern>\n            </defs>\n            <rect width=\"220\" height=\"192\" fill=\"url(#837c3e70-6c3a-44e6-8854-cc48c737b659)\"></rect>\n        </svg>\n        <!-- @formatter:on -->\n        <!-- Content -->\n        <div class=\"z-10 relative w-full max-w-2xl\">\n            <div class=\"text-7xl font-bold leading-none text-gray-100\">\n                <div>Welcome to</div>\n                <div>our community</div>\n            </div>\n            <div class=\"mt-6 text-lg tracking-tight leading-6 text-gray-400\">\n                Fuse helps developers to build organized and well coded dashboards full of beautiful and rich modules.\n                Join us and start building your application today.\n            </div>\n            <div class=\"flex items-center mt-8\">\n                <div class=\"flex flex-0 items-center -space-x-1.5\">\n                    <img\n                        class=\"flex-0 w-10 h-10 rounded-full ring-4 ring-offset-1 ring-gray-800 ring-offset-gray-800 object-cover\"\n                        src=\"assets/images/avatars/female-18.jpg\">\n                    <img\n                        class=\"flex-0 w-10 h-10 rounded-full ring-4 ring-offset-1 ring-gray-800 ring-offset-gray-800 object-cover\"\n                        src=\"assets/images/avatars/female-11.jpg\">\n                    <img\n                        class=\"flex-0 w-10 h-10 rounded-full ring-4 ring-offset-1 ring-gray-800 ring-offset-gray-800 object-cover\"\n                        src=\"assets/images/avatars/male-09.jpg\">\n                    <img\n                        class=\"flex-0 w-10 h-10 rounded-full ring-4 ring-offset-1 ring-gray-800 ring-offset-gray-800 object-cover\"\n                        src=\"assets/images/avatars/male-16.jpg\">\n                </div>\n                <div class=\"ml-4 font-medium tracking-tight text-gray-400\">More than 17k people joined us, it's your turn</div>\n            </div>\n        </div>\n    </div>\n</div>\n","import { Routes } from '@angular/router';\nimport { AuthResetPasswordComponent } from 'app/modules/auth/reset-password/reset-password.component';\n\nexport default [\n    {\n        path     : '',\n        component: AuthResetPasswordComponent,\n    },\n] as Routes;\n"],"names":["FuseValidators","isEmptyInputValue","value","length","mustMatch","controlPath","matchingControlPath","formGroup","control","get","matchingControl","hasError","errors","updateValueAndValidity","setErrors","NgIf","FormsModule","ReactiveFormsModule","Validators","MatButtonModule","MatFormFieldModule","MatIconModule","MatInputModule","MatProgressSpinnerModule","RouterLink","fuseAnimations","FuseAlertComponent","finalize","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","ctx_r0","alert","type","ɵɵadvance","ɵɵtextInterpolate1","message","ɵɵelement","AuthResetPasswordComponent","constructor","_authService","_formBuilder","showAlert","ngOnInit","resetPasswordForm","group","password","required","passwordConfirm","validators","resetPassword","invalid","disable","pipe","enable","resetPasswordNgForm","resetForm","subscribe","response","ɵɵdirectiveInject","i1","AuthService","i2","UntypedFormBuilder","selectors","viewQuery","AuthResetPasswordComponent_Query","rf","ctx","ɵɵtemplate","AuthResetPasswordComponent_fuse_alert_9_Template","ɵɵlistener","AuthResetPasswordComponent_Template_button_click_17_listener","ɵɵrestoreView","_r12","_r2","ɵɵreference","ɵɵresetView","AuthResetPasswordComponent_mat_icon_18_Template","AuthResetPasswordComponent_mat_icon_19_Template","AuthResetPasswordComponent_Template_button_click_27_listener","_r5","AuthResetPasswordComponent_mat_icon_28_Template","AuthResetPasswordComponent_mat_icon_29_Template","AuthResetPasswordComponent_mat_error_30_Template","AuthResetPasswordComponent_mat_error_31_Template","AuthResetPasswordComponent_Template_button_click_32_listener","AuthResetPasswordComponent_span_33_Template","AuthResetPasswordComponent_mat_progress_spinner_34_Template","ɵɵnamespaceSVG","ɵɵnamespaceHTML","disabled","ɵɵpureFunction0","_c1","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","FormGroupDirective","FormControlName","i3","MatFormField","MatLabel","MatError","MatSuffix","i4","MatInput","i5","MatButton","MatIconButton","i6","MatIcon","i7","MatProgressSpinner","encapsulation","data","animation","path","component"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}